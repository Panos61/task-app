services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:  
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.fixed
      target: production
    ports:
      - "4000:4000"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}

  frontend:
    build: 
      context: ./client
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${API_URL:-http://167.235.30.231:4000}
    networks:
      - app-network
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      NODE_ENV: production
      VITE_API_URL: ${API_URL:-http://167.235.30.231:4000}

networks:
  app-network:
    driver: bridge
    
volumes:
  db-data: